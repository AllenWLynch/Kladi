

config : 'config.yaml'

rule filter_fragment_regions:
    input: 
        regions = '{workdir}/regions.bed',
        fragment_file = lambda w : config['sources'][w.source_id]
    output:
        '{workdir}/{source_id}-filtered_fragments.bed'
    shell:
        'bedtools intersect -a {input.fragment_file} -b {regions} -sorted -wa > {output}'

rule filter_fragment_barcodes:
    input:
        fragment_file = rule.filter_fragment_regions.output,
        barcodes = '{workdir}/{track_id}-fragment_signal-barcodes.txt'
    output:
        '{workdir}/{track_id}-fragment_signal-{source_id}-barcode_filtered_fragments.bed'
    shell:
        'python bin/filter_barcodes.py {input.fragment_file} {input.barcodes} > {output}'

rule count_fragments:
    input:
        rule.filter_fragment_barcodes.output
    output:
        '{workdir}/{track_id}-fragment_signal-{source_id}-fragcount.txt'
    shell:
        'wc -l {input} > {output}'

def get_fragment_count(w):
    with open('{workdir}/{track_id}-fragment_signal-{source_id}-fragcount.txt'.format(
        workdir = w.workdir, track_id = w.track_id, source_id = w.source_id
    ), 'r') as f:
        read_depth = int(f.read().strip())

    return read_depth/config[w.track_id]['norm_constant']

rule fragments_to_bedgraph:
    input:
        fragments = rule.filter_fragment_barcodes.output
        read_depth = rule.count_fragments.output
    output:
        '{workdir}/{track_id}-fragment_signal-{source_id}-pileup.bedgraph'
    params:
        norm = get_fragment_count
        genome = lambda w : config[w.track_id]['genome_file']
    shell:
        'bedtools genomecov -g {params.genome} -i {input} -scale {params.norm} -bga > {output}'


rule bedgraph_to_bigwig:
    input:
        rule.fragments_to_bedgraph.output
    output:
        '{workdir}/{track_id}-fragment_signal-{source_id}-pileup.bigwig'
    params:
        genome = lambda w : config[w.track_id]['genome_file']
    shell:
        'bedGraphToBigWig {input} {params.genome} {output}'